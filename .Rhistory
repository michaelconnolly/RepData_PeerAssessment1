## ## [1] 1.281
}
myFile2 <- pollutantmean("C:\\Users\\mikeconn\\SkyDrive\\(coursera)\\R-Programming\\Assignment1\\specdata", id=2:30)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
currentFile <- read.csv(nameOfFile)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
print(currentFile[1])
}
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
myFile2 <- pollutantmean("C:\\Users\\mikeconn\\SkyDrive\\(coursera)\\R-Programming\\Assignment1\\specdata", id=2:30)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
currentFile <- read.csv(nameOfFile)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
print(currentFile[1,1])
}
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
myFile2 <- pollutantmean("C:\\Users\\mikeconn\\SkyDrive\\(coursera)\\R-Programming\\Assignment1\\specdata", id=2:30)
View(myFile2)
View(myFile2)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
currentFile <- read.csv(nameOfFile, colClasses=c(pollutant))
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
print(currentFile[1,1])
}
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
View(myFile2)
myFile2 <- pollutantmean("C:\\Users\\mikeconn\\SkyDrive\\(coursera)\\R-Programming\\Assignment1\\specdata", id=2:30)
myFile2 <- pollutantmean("C:\\Users\\mikeconn\\SkyDrive\\(coursera)\\R-Programming\\Assignment1\\specdata", pollutant="nitrate", id=2:30)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
for (i in id){
print(currentFile[1,1])
}
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
myFile2 <- pollutantmean("C:\\Users\\mikeconn\\SkyDrive\\(coursera)\\R-Programming\\Assignment1\\specdata", pollutant="nitrate", id=2:30)
View(myFile2)
myFile2 <- pollutantmean("C:\\Users\\mikeconn\\SkyDrive\\(coursera)\\R-Programming\\Assignment1\\specdata", "nitrate", 1:10)
View(myFile2)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
#for (i in id){
#  print(currentFile[i$pollutant])
#}
print currentFile$pollutant
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
##for (i in id){
##  print(currentFile[i$pollutant])
##}
print currentFile$pollutant
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
##currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
currentFile <- read.csv(nameOfFile)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
##for (i in id){
##  print(currentFile[i$pollutant])
##}
print currentFile[1,]
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
##currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
currentFile <- read.csv(nameOfFile)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
##for (i in id){
##  print(currentFile[i$pollutant])
##}
print currentFile[1,]
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
##currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
currentFile <- read.csv(nameOfFile)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
print currentFile[1,]
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
##currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
currentFile <- read.csv(nameOfFile)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
print currentFile[1,1]
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
nameOfFile <- paste0(directory, "\\001.csv")
##pollutantmean <- nameOfFile
##currentFile <- read.csv(nameOfFile, colClasses=c(pollutant="character"))
currentFile <- read.csv(nameOfFile)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
//print currentFile[1,1]
currentFile
## Example Output:
## source("pollutantmean.R")
## pollutantmean("specdata", "sulfate", 1:10)
## ## [1] 4.064
## pollutantmean("specdata", "nitrate", 70:72)
## ## [1] 1.706
## pollutantmean("specdata", "nitrate", 23)
## ## [1] 1.281
}
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "Fss06hid.csv")
table1 <- read.csv("Fss06hid.csv")
View(table1)
tablenames <- names(table1)
tablenames1 <- strsplit(tablenames, "wgtp")
tablenames1[0]
tablenames(0)
tablenames1(0)
tablenames1[0]
tablenames1[1]
tablenames1[123]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "GDP.csv")
table2 <- read.csv("GDP.csv")
View(table2)
table 3 <- read.csv("GDP.csv", skip=4)
table3 <- read.csv("GDP.csv", skip=4)
View(table3)
View(table3)
gsub(",", "", table3[,table3[5]])
myfunc <- function(x){gsub(",", "", x)}
table4 <- sapply(table3[5], FUN=myfunc)
table4 <- sapply(table4, FUN=str_trim)
library(stringr)
table4 <- sapply(table4, FUN=str_trim)
table4 <- sapply(table3[5], FUN=myfunc)
avg <- sapply(table4, FUN=mean)
View(table3)
View(table4)
View(table3)
grep("^United", table3[5])
val <- grep("^United", table3[,5])
countryNames <- table3[,5]
head(countryNames)
countryNames <-table3[,4]
head(countrynames)
head(countryNames)
grep("^United", countryNames)
grep("United$", countryNames)
grep("*United", countryNames)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "country.csv")
country <- read.csv("country.csv")
View(country)
View(table3)
View(country)
merged <- merge(country, table3, by.x="CountryCode", by.y="X")
View(merged)
fycol <- merged["Special.Notes"]
View(fycol)
grep("Fiscal year end: June 30", fycol)
grep("^Fiscal year end: June 30", fycol)
View(fycol)
grep("^Fiscal year end: June 30", fycol)
grep("Fiscal", fycol)
head(fycol)
grep("year", fycol)
grepl("year", fycol)
fycol <- merged[,10]
grep("year", fycol)
grep("Fiscal year end: June 30", fycol)
install.packages("quantmod")
libary(quantmod)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
names(amzn)
amzn[1,0]
cnt <- grep("^2012-", amzn[,0])
firstcol <- amzn[,0]
View(firstcol)
cnt <- grep("^2012", firstcol)
names(firstcol)
foo = c(firstcol)
View(foo)
grep("2012", foo)
type(foo)
as.string(foo)
str(foo)
? getSymbols
View(amzn)
View(amzn)
foo <- amzn[,"row.names"]
View(foo)
View(foo)
foo.names = c("datadate")
View(foo)
rownames(foo)
rownames(foo)<-c("datadate")
View(foo)
head(foo)
foo
View(amzn)
grep("^2012", amzn[,0])
grep("^2012", amzn)
grep("^2012", amzn[0])
names(amzn)
rownames(amzn)
amzn.names[0]
amzn[0]
amzn[,0]
grep("2012", amzn[,0])
write.csv(amzn, "amzn.csv")
? write.csv
write.csv(amzn, "amzn2.csv, row.names=TRUE")
write.csv(amzn, "amzn2.csv", row.names=TRUE)
install.packages("lattice")
library(lattice)
install.packages("ggplot2")
library(ggplot2)
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa WHERE weekday="weekend" GROUP BY interval")
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa WHERE weekday='weekend' GROUP BY interval")
library(sqldf)
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa WHERE weekday='weekend' GROUP BY interval")
dataFileFixedNa <- dataFile
dataFileFixedNa$steps[is.na(dataFileFixedNa$steps)] <- stepsMean
dataFile <- read.csv("activity.csv")
dataFileRemoveNa <- na.omit(dataFile)
stepsValues <- dataFileRemoveNa$steps
setwd("C:/dev/RepData_PeerAssessment1")
dataFile <- read.csv("activity.csv")
dataFileRemoveNa <- na.omit(dataFile)
stepsValues <- dataFileRemoveNa$steps
stepsMean <- format(mean(stepsValues), nsmall=2)
stepsMedian <- median(stepsValues)
library(sqldf)
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa WHERE weekday='weekend' GROUP BY interval")
dataFileFixedNa <- dataFile
dataFileFixedNa$steps[is.na(dataFileFixedNa$steps)] <- stepsMean
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa WHERE weekday='weekend' GROUP BY interval")
dataFileFixedNa$weekday <- lapply(as.Date(dataFileFixedNa$date), WeekendOrWeekday)
# Weekdays stuff
WeekendOrWeekday <- function(inputDate){
dayOfWeek <- weekdays(inputDate)
if ((dayOfWeek == "Saturday") || (dayOfWeek == "Sunday")){
return("weekend")
}
else {
return("weekday")
}
}
dataFileFixedNa$weekday <- lapply(as.Date(dataFileFixedNa$date), WeekendOrWeekday)
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa WHERE weekday='weekend' GROUP BY interval")
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa WHERE weekday=\"weekend\" GROUP BY interval")
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa GROUP BY interval, weekday")
averageDailyActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileRemoveNa GROUP BY interval")
averageDailyActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileRemoveNa GROUP BY interval")
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa GROUP BY interval")
averageDailyActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileRemoveNa GROUP BY interval")
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa GROUP BY interval")
foo <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa GROUP BY interval")
View(dataFileFixedNa)
# create new dataset with the mean thrown in there.
dataFileFixedNa <- dataFile
dataFileFixedNa$steps[is.na(dataFileFixedNa$steps)] <- stepsMean
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa GROUP BY interval")
View(averageWeekdayActivityPattern)
dataFileFixedNa$weekday <- lapply(as.Date(dataFileFixedNa$date), WeekendOrWeekday)
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa GROUP BY interval")
View(dataFileFixedNa)
dataFileFixedNaWeekday <- sqldf("SELECT steps, date, interval FROM dataFileFixedNa WHERE weekday='weekday'")
dataFileFixedNa$weekday <- lapply(as.Date(dataFileFixedNa$date), WeekendOrWeekday)
View(dataFileFixedNa)
# Weekdays stuff
WeekendOrWeekday <- function(inputDate){
dayOfWeek <- weekdays(inputDate)
if ((dayOfWeek == "Saturday") || (dayOfWeek == "Sunday")){
return(0)
}
else {
return(1)
}
}
dataFileFixedNa$weekday <- lapply(as.Date(dataFileFixedNa$date), WeekendOrWeekday)
View(dataFileFixedNa)
averageWeekdayActivityPattern <- sqldf("SELECT interval, AVG(steps) AS StepsAverage FROM dataFileFixedNa GROUP BY interval")
dataFileFixedNaWeekday <- sqldf("SELECT steps, date, interval FROM dataFileFixedNa WHERE weekday=1")
foo <- sqldf("SELECT * FROM dataFileFixedNa")
View(dataFileFixedNa)
weekdays <- dataFileFixedNa[dataFileFixedNa$weekday=0,]
weekdays <- dataFileFixedNa[dataFileFixedNa$weekday==0,]
View(weekdays)
weekends <- dataFileFixedNa[dataFileFixedNa$weekday==1,]
averageWeekdays <- sqldf("SELECT interval, AVG(steps) as StepsAverage FROM weekdays GROUP BY interval")
View(weekdays)
weekdays <- dataFileFixedNa[dataFileFixedNa$weekday==0, c(dataFileFixedNa$interval, dataFileFixedNa$steps)]
View(dataFileFixedNa)
View(dataFileFixedNa)
weekdays <- dataFileFixedNa[dataFileFixedNa$weekday==0, c("interval", "steps")]
averageWeekdays <- sqldf("SELECT interval, AVG(steps) as StepsAverage FROM weekdays GROUP BY interval")
View(averageWeekdays)
plot(averageWeekdays$interval~averageWeekdays$StepsAverage, type="l")
set.panel(m=2, n=1)
plot(averageWeekdays$StepsAverage~averageWeekdays$interval, type="l")
plot(averageWeekendss$StepsAverage~averageWeekdays$interval, type="l")
set.panel(m=2, n=1)
plot(averageWeekdays$StepsAverage~averageWeekdays$interval, type="l")
plot(averageWeekends$StepsAverage~averageWeekdays$interval, type="l")
averageWeekends <- sqldf("SELECT interval, AVG(steps) as StepsAverage FROM weekends GROUP BY interval")
weekends <- dataFileFixedNa[dataFileFixedNa$weekday==1, c("interval", "steps")]
averageWeekends <- sqldf("SELECT interval, AVG(steps) as StepsAverage FROM weekends GROUP BY interval")
set.panel(m=2, n=1)
plot(averageWeekdays$StepsAverage~averageWeekdays$interval, type="l")
plot(averageWeekends$StepsAverage~averageWeekdays$interval, type="l")
par(mfrow=c(2,1))
plot(averageWeekdays$StepsAverage~averageWeekdays$interval, type="l", main="weekdays")
plot(averageWeekends$StepsAverage~averageWeekdays$interval, type="l", main="weekends")
par(mfrow=c(2,1))
plot(averageWeekdays$StepsAverage~averageWeekdays$interval, type="l", main="weekdays")
plot(averageWeekends$StepsAverage~averageWeekends$interval, type="l", main="weekends")
